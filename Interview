一、基础篇
  1.1.Java语言的特点
    1、简单易学，有丰富的类库
    2、面向对象（最重要的特性，让程序耦合度更低，内聚性更高）
    3、与平台无关性
    4、可靠安全
    5、支持多线程
  1.2.面向对象和面向过程的区别
    面向过程：分析解决问题的步骤，然后用函数把这些步骤一步一步地实现，然后在使用的使用一一调用则可。性能较高，单片机、嵌入式开发等一般采用面向过程开发。
    面向对象：把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特性，所以易维护、易复用、易拓展。可以设计出低耦合的系统。性能上比面向过程地低。
    注：耦合性是一种软件度量，是指一程序中，模块及模块之间信息或参数依赖的程度。
  1.3.八种基本数据类型
    基本类型    大小（字节）    默认值       封装类
    byte        1             (byte)0      Byte
    short       2             (short)0     Short
    int         4             0            Integer
    long        8             0L           Long
    float       4             0.0f         Float
    double      8             0.0d         Double
    boolean     -             false        Boolean
    char        2             \u000(null)  Character
    注：
      1、int是基本数据类型，Integer是int的封装类，是引用类型。int默认值是0，二Integer默认值是null，所以Integer能区分出0和null的情况。一旦Java看到null，就知道这个引用还没有只想某个对象，在任何引用使用前，必须为其指定一个对象，否则会报错。
      2、基本数据类型在声明时系统会自动给它分配空间，而引用类型声明时只是分配了引用空间，必须通过实例化开辟数据空间之后才可以赋值
      3、Integer类取值在-128~127效率最高。在某个范围内的整型数值的个数是有限的，而浮点数却不是。
      Integer i1 = 100；
      Integer i2 = 100；
      Integer i3 = 200；
      Integer i4 = 200；
      System.out.println(i1==i2);    --> true
      System.out.println(i3==i4);    --> false
      Double d1 = 100.0；
      Double d2 = 100.0；
      Double d3 = 200.0；
      Double d3 = 200.0；
      System.out.println(d1==d2);    --> false
      System.out.println(d3==d4);    --> false
  1.4.标识符的命名规则
    标识符：是指在程序中，自己定义的内容，譬如，类名，方法名以及变量名等
    命名规则：
      标识符可以包含英文字母，0-9的数字，$以及_
      标识符不能以数字开头
      标识符不是关键字
    命名规范：
      类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）
      方法名及变量名规范:首字母小写，后面每个单词首字母大写（小驼峰式）
  1.5.instanceof关键字的作用
    Java的一个双目运算符，用来测试一个对象是否是一个类的实例。
  1.6.Java自动装箱与拆箱
    装箱就是自动将基本数据类型转换为包装器类型（int->integer）。调用方法：Integer的valueOf(int)方法
    拆箱就是自动将包装器类型转换成基本数据类型（integer->int）。调用方法：Integer的intValue方法
  1.7.重载和重写的区别
    重写（Override）：在子类中把父类本身有的方法重新写一遍。子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型（除过子类中方法的返回值是父类中方法返回值的子类时）都相同的情况下，对方法体进行修改或重写。注意子类函数的访问修饰权限不能少于父类的。
    重载（Overload）：在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同甚至是参数顺序不同）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但不能通过返回类型是否相同来判断重载。
  1.8.equals与==的区别
    ==
      比较的是变量（栈）内存中存放的对象的（堆）内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作；
      比较的是操作符两端的操作数是否是同一个对象；
      两边的操作数必须是同一个类型的（可以是父子类之间）才能编译通过；
      比较的是地址，但如果是具体的阿拉伯数字的比较，值相等则为true，如：int a = 10 与 long b - 10L 与 double c = 10.0都是相同的，因为他们都指向地址为10的堆。
    equals：
      用来比较的是两个对象的内容是否相等，由于所有的类都是继承java.lang.object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是object类的方法，而object中的equals方法返回的却是==的判断。
  1.9.Hashcode的作用
    Java的集合有两类，一类是list，一类是set，前者有序可重复，后者无序不重复。当我们在set中插入的时候怎么判断是否已经存在该元素呢，可以通过equals方法。但是如果元素太多，用这样的方法就会比较慢。于是有人发明了哈希算法来提高集合中查找元素的效率。这种方式将集合分成若干个存储区域，每个对象可以计算出一个哈希码，可以将哈希码分组，每组分别对应某个存储区域，根据一个对象的哈希码就可以确定该对象应该存储的那个区域。
    hashcode方法可以这样理解：它返回的就是根据对象的内存地址换算出的一个值。当集合要添加新的元素时，先调用这个元素的hashcode方法，就一下子能定位到它应该放置的物理位置上。如果这个位置上没有元素，它就可以直接存储在这个位置上，不用在进行任何比较了；如果这个位置上有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其他的地址。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。
  1.10.String、StringBuffer、StringBuilder的区别
    String是只读字符串，并不是基本数据类型，而是一个对象。从底层源码来看是一个final类型的字符数组，所引用的字符串不能被改变，一经定义，无法再增删改。每次对string的操作都会生成新的string对象。
    StringBuffer和StringBuilder都继承了AbstractStringBuilder抽象类，从AbstractStringBuilder抽象类中我们可以看到它们的底层都是可变的字符数组，所以在进行频繁的字符串操作时，建议是同StringBuffer和StringBuilder来进行操作。另外StringBuffer对方法加了同步锁或则对调用的方法加了同步锁，所以是线程安全的。StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。
  1.11.ArrayList和linkedList的区别
    Array（数组）是基于索引（index）的数据结构，它使用索引在数组中搜索和读取数据是很快的。Array获取数据的时间复杂度是O(1)，但是要删除数据却是开销很大，因为这需要重排数组中的所有数据（因为删除数据以后，需要把后面所有的数据前移）。缺点：数组初始化必须指定初始化的长度，否则报错
    List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承了Collection。
    List有两个重要的实现类：ArrayList和linkedList
    ArrayList：可以看作是能够自动增长容量的数组；ArrayList的toArray方法返回一个数组；ArrayList的asList方法返回一个列表；ArrayList底层的实现是Array，数组扩容实现
    linkedList是一个双链表，在添加和删除元素时具有比ArrayList更好的性能，但在get与set方面弱于ArrayList，当然这些对比都是指数据量很大或者操作很频繁
  1.12.HashMap和HashTbale的区别
    1、两者父类不同
      HashMap是继承自AbstractMap类，而Hashtable是继承自Dictionary类。不过它们都实现了同时实现了map、Cloneable（可复制）、Serializable（可序列化）这三个接口。
    2、对外提供的接口不同
      Hashtable比HashMap多提供了elments() 和contains() 两个方法。elments() 方法继承自Hashtable的父类Dictionnary。elements() 方法用于返回此Hashtable中的value的枚举。contains()方法判断该Hashtable是否包含传入的value。它的作用与containsValue()一致。事实上，containsValue() 就只是调用了一下contains() 方法。
    3、对null的支持不同
      Hashtable：key和value都不能为null。
      HashMap：key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性；可以有多个key值对应的value为null。
    4、安全性不同
      HashMap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题，因此需要开发人员自己处理多线程的安全问题。
      Hashtable是线程安全的，它的每个方法上都有synchronized 关键字，因此可直接用于多线程中。虽然HashMap是线程不安全的，但是它的效率远远高于Hashtable，这样设计是合理的，因为大部分的使用场景都是单线程。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。
    5、初始容量大小和每次扩充容量大小不同
    6、计算hash值的方法不同
  1.13.Collection包结构与Collections的区别
    Collection是集合类的上级接口，子接口有 Set、List、LinkedList、ArrayList、Vector、Stack、Set；
    Collections是集合类的一个帮助类， 它包含有各种有关集合操作的静态多态方法，用于实现对各种集合的搜索、排序、线程安全化等操作。此类不能实例化，就像一个工具类，服务于Java的Collection框架。
  1.14. Java的四种引用，强弱软虚
    强引用：是平常中使用最多的引用，强引用在程序内存不足（OOM）的时候也不会被回收，使用方式：String str = new String("str");
    软引用：软引用在程序内存不足时，会被回收，使用方式：SoftReference<String> wrf = new SoftReference<String>(new String("str"));可用场景： 创建缓存的时候，创建的对象放进缓存中，当内存不足时，JVM就会回收早先创建的对象。
    弱引用：就是只要JVM垃圾回收器发现了它，就会将之回收，使用方式：WeakReference<String> wrf = new WeakReference<String>(str);可用场景：Java源码中的 java.util.WeakHashMap 中的key就是使用弱引用，我的理解就是，一旦我不需要某个引用，JVM会自动帮我处理它，这样我就不需要做其它操作。
    虚引用：虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入ReferenceQueue 中。注意哦，其它引用是被JVM回收后才被传入ReferenceQueue 中的。由于这个机制，所以虚引用大多被用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有ReferenceQueue，使用例子：PhantomReference<String> prf = new hantomReference<String>(new String("str"), new ReferenceQueue<>());可用场景：对象销毁前的一些操作，比如说资源释放等。Object.finalize() 虽然也可以做这类动作，但是这个方式即不安全又低效
    上诉所说的几类引用，都是指对象本身的引用，而不是指 Reference 的四个子类的引用( SoftReference 等)。
  1.15.泛型常用特点
    “泛型” 意味着编写的代码可以被不同类型的对象所重用。“泛型”，顾名思义，“泛指的类型”。我们提供了泛指的概念，但具体执行的时候却可以有具体的规则来约束，比如我们用的非常多的ArrayList就是个泛型类，ArrayList作为集合可以存放各种元素，如Integer, String，自定义的各种类型等，但在我们使用的时候通过具体的规则来约束，如我们可以约束集合中只存放Integer类型的元素，如List<Integer> iniData = new ArrayList<>();
    使用泛型的好处：以集合来举例，使用泛型的好处是我们不必因为添加元素类型的不同而定义不同类型的集合，如整型集合类，浮点型集合类，字符串集合类，我们可以定义一个集合来存放整型、浮点型，字符串型数据，而这并不是最重要的，因为我们只要把底层存储设置了Object即可，添加的数据全部都可向上转型为Object。 更重要的是我们可以通过规则按照自己的想法控制存储的数据类型。
  1.16.Java创建对象的方式                    是否调用构造器
    new创建新对象                             是
    通过反射机制：通过newInstances；           是
                 调用构造器再去创建对象;        是
    采用clone机制                              否
    通过序列化机制                             否
  1.17.有没有可能两个不相等的对象有相同的hashcode
    有可能。在产生hash冲突时，两个不相等的对象就会有相同的hashcode值，当hash冲突产生时，一般有以下几种方式来处理：
      拉链法：每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表进行存储。
      开放定址法：一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。
      再哈希：又叫双哈希法，有多个不同的hash函数，当发生冲突时，使用第二个，第三个...等哈希函数计算地址，直到无冲突。
  1.18.深拷贝和浅拷贝的区别
    浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象，换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。
    深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象，换言之，深拷贝把要复制的对象所引用的对象都复制了一遍。
  1.19.final的用法
    被final修饰的类不可以被继承
    被final修饰的方法不可以被重写
    被final修饰的变量不可以被改变，如果修饰引用，那么表示引用不可变，引用指向的内容可变
    被final修饰的方法，JVM会被尝试将其内联，以提高运行效率。
    被final修饰的常量，在编译阶段会存入常量池中。
  1.20.static的用法
    1、修饰成员变量，将其变为类的成员，从而实现所有对象对于该成员的共享
    2、修饰成员方法，将其变成类方法，可以直接使用“类名.方法名”方式调用
    3、静态块用法，将多个类成员一起初始化
  1.21.3*0.1==0.3返回值
    false，因为有些浮点数不能完全精确的表示出来
  1.22.a=a+b与a+=b的区别
    +=操作符会进行隐式自动类型转换，而a=a+b不会自动进行类型转换
    short s1 = 1;
    s1 = s1 + 1;       错误，s1 + 1的运算结果是int类型，而s1是short类型，此时编译器报错
    short s1 = 1；
    s1 += 1；          正确，+=操作符会对右边的表达式结果强转匹配左边的数据类型
  1.23.try catch finally，try里有return，finally还执行吗？
    执行，并且finally的执行早于try里面的return
    结论：
      1、不管有没有出现异常，finally块中代码都会执行；
      2、当try和catch中有return时，finally仍会执行；
      3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，不管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），所以函数返回值实在finally执行前确定的；
      4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。
  1.24.excption与error包结构
      Java可抛出的结构分为三种类型：被检查的异常（CheckedException），运行时异常（RuntimeException），错误（Error）。
      1、运行时异常
        定义：RuntimeException及其子类都会被称为运行时异常。
        特点：Java编译器不会检查它。倘若既没有通过throw声明抛出它，也没有try-catch语句捕获它，还是会编译通过。例如，除数为0时产生的ArithmeticException异常，数组越界产生的IndexOutOfBoundsException异常，fail-fast机制产生的ConcurrentModificationExecption异常
        常见的五种运行时异常：ClassCastException（类转换异常）、IndexOutOfBoundsException（数组越界）、NullPointerException（空指针异常）、ArrayStoreException（数组存储异常，操作数组是类型不一致）、BufferOverflowException
      2、被检查异常
        定义：Exception类本身，以及Exception的子类中除了“运行时异常”之外的其他子类都属于被检查异常。
        特点：Java编译器会检查它。此类异常，要么通过throws进行声明抛出，要么通过try-catch进行捕获处理，否则不能通过编译。例如。CloneNotSupportedException就属于被检查异常，当通过clone()接口去克隆一个对象，而该对象对应的类没有实现cloneable接口，就会抛出CloneNotSupportedException异常。被检查异常通常都是可以恢复的。
        如：IOException、FileNotFoundException、SQLException。被检查的异常适用于那些不是因程序引起的错误情况，比如读取文件时文件不存在引发的FileNotFoundException。然而，不被检查的异常通常都是由于糟糕的编程引起的，比如：在对象引用时没有确保对象非空而引起的NullPointerException。
      3、错误
        定义：Error类及其子类
        特点：和运行时异常一样，编译器也不会对错误进行检查。
        当资源不足、约束失败、或是其他程序无法继续运行的条件发生时，就产生错误。程序本身无法修复这些错误的。例如，VirtualMachineError就属于错误。出现这种错误会导致程序终止运行。
        OutOfMemoryError、ThreadDeath。
  1.25.OOM你遇到哪些情况，SOF你遇到过哪些情况
    OOM:OutOfMemoryError异常
      


















