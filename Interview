一、基础篇
  1.1.Java语言的特点
    1、简单易学，有丰富的类库
    2、面向对象（最重要的特性，让程序耦合度更低，内聚性更高）
    3、与平台无关性
    4、可靠安全
    5、支持多线程
  1.2.面向对象和面向过程的区别
    面向过程：分析解决问题的步骤，然后用函数把这些步骤一步一步地实现，然后在使用的使用一一调用则可。性能较高，单片机、嵌入式开发等一般采用面向过程开发。
    面向对象：把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特性，所以易维护、易复用、易拓展。可以设计出低耦合的系统。性能上比面向过程地低。
    注：耦合性是一种软件度量，是指一程序中，模块及模块之间信息或参数依赖的程度。
  1.3.八种基本数据类型
    基本类型    大小（字节）    默认值       封装类
    byte        1             (byte)0      Byte
    short       2             (short)0     Short
    int         4             0            Integer
    long        8             0L           Long
    float       4             0.0f         Float
    double      8             0.0d         Double
    boolean     -             false        Boolean
    char        2             \u000(null)  Character
    注：
      1、int是基本数据类型，Integer是int的封装类，是引用类型。int默认值是0，二Integer默认值是null，所以Integer能区分出0和null的情况。一旦Java看到null，就知道这个引用还没有只想某个对象，在任何引用使用前，必须为其指定一个对象，否则会报错。
      2、基本数据类型在声明时系统会自动给它分配空间，而引用类型声明时只是分配了引用空间，必须通过实例化开辟数据空间之后才可以赋值
      3、Integer类取值在-128~127效率最高。在某个范围内的整型数值的个数是有限的，而浮点数却不是。
      Integer i1 = 100；
      Integer i2 = 100；
      Integer i3 = 200；
      Integer i4 = 200；
      System.out.println(i1==i2);    --> true
      System.out.println(i3==i4);    --> false
      Double d1 = 100.0；
      Double d2 = 100.0；
      Double d3 = 200.0；
      Double d3 = 200.0；
      System.out.println(d1==d2);    --> false
      System.out.println(d3==d4);    --> false
  1.4.标识符的命名规则
    标识符：是指在程序中，自己定义的内容，譬如，类名，方法名以及变量名等
    命名规则：
      标识符可以包含英文字母，0-9的数字，$以及_
      标识符不能以数字开头
      标识符不是关键字
    命名规范：
      类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）
      方法名及变量名规范:首字母小写，后面每个单词首字母大写（小驼峰式）
  1.5.instanceof关键字的作用
    Java的一个双目运算符，用来测试一个对象是否是一个类的实例。
  1.6.Java自动装箱与拆箱
    装箱就是自动将基本数据类型转换为包装器类型（int->integer）。调用方法：Integer的valueOf(int)方法
    拆箱就是自动将包装器类型转换成基本数据类型（integer->int）。调用方法：Integer的intValue方法
  1.7.重载和重写的区别
    重写（Override）：在子类中把父类本身有的方法重新写一遍。子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型（除过子类中方法的返回值是父类中方法返回值的子类时）都相同的情况下，对方法体进行修改或重写。注意子类函数的访问修饰权限不能少于父类的。
    重载（Overload）：在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同甚至是参数顺序不同）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但不能通过返回类型是否相同来判断重载。
  1.8.equals与==的区别
    ==
      比较的是变量（栈）内存中存放的对象的（堆）内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作；
      比较的是操作符两端的操作数是否是同一个对象；
      两边的操作数必须是同一个类型的（可以是父子类之间）才能编译通过；
      比较的是地址，但如果是具体的阿拉伯数字的比较，值相等则为true，如：int a = 10 与 long b - 10L 与 double c = 10.0都是相同的，因为他们都指向地址为10的堆。
    equals：
      用来比较的是两个对象的内容是否相等，由于所有的类都是继承java.lang.object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是object类的方法，而object中的equals方法返回的却是==的判断。
  1.9.Hashcode的作用
    Java的集合有两类，一类是list，一类是set，前者有序可重复，后者无序不重复。当我们在set中插入的时候怎么判断是否已经存在该元素呢，可以通过equals方法。但是如果元素太多，用这样的方法就会比较慢。于是有人发明了哈希算法来提高集合中查找元素的效率。这种方式将集合分成若干个存储区域，每个对象可以计算出一个哈希码，可以将哈希码分组，每组分别对应某个存储区域，根据一个对象的哈希码就可以确定该对象应该存储的那个区域。
    hashcode方法可以这样理解：它返回的就是根据对象的内存地址换算出的一个值。当集合要添加新的元素时，先调用这个元素的hashcode方法，就一下子能定位到它应该放置的物理位置上。如果这个位置上没有元素，它就可以直接存储在这个位置上，不用在进行任何比较了；如果这个位置上有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其他的地址。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。
  1.10.String、StringBuffer、StringBuilder的区别
    String是只读字符串，并不是基本数据类型，而是一个对象。从底层源码来看是一个final类型的字符数组，所引用的字符串不能被改变，一经定义，无法再增删改。每次对string的操作都会生成新的string对象。
    StringBuffer和StringBuilder都继承了AbstractStringBuilder抽象类，从AbstractStringBuilder抽象类中我们可以看到它们的底层都是可变的字符数组，所以在进行频繁的字符串操作时，建议是同StringBuffer和StringBuilder来进行操作。另外StringBuffer对方法加了同步锁或则对调用的方法加了同步锁，所以是线程安全的。StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。
  1.11.ArrayList和linkedList的区别
    Array（数组）是基于索引（index）的数据结构，它使用索引在数组中搜索和读取数据是很快的。Array获取数据的时间复杂度是O(1)，但是要删除数据却是开销很大，因为这需要重排数组中的所有数据（因为删除数据以后，需要把后面所有的数据前移）。缺点：数组初始化必须指定初始化的长度，否则报错
    List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承了Collection。
    List有两个重要的实现类：ArrayList和linkedList
    ArrayList：可以看作是能够自动增长容量的数组；ArrayList的toArray方法返回一个数组；ArrayList的asList方法返回一个列表；ArrayList底层的实现是Array，数组扩容实现
    linkedList是一个双链表，在添加和删除元素时具有比ArrayList更好的性能，但在get与set方面弱于ArrayList，当然这些对比都是指数据量很大或者操作很频繁
  1.12.HashMap和HashTbale的区别
  
